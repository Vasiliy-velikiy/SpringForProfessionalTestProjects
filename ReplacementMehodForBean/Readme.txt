Замена метода Несмотря на то что в документации на Spring замена метода классифицируется как форма внедрения зависимостей, она заметно отличается от того, что было рас смотрено до сих пор, когда внедрение зависимостей применялось исключительно для предоставления компонентов Spring Beans и взаимодействующих с ними объектов. Применяя замену метода, можно произвольно заменить реализацию любого метода в каком угодно компоненте Spring Веап, не внося коррективы в исходный код этого компонента. Допустим, что в приложении применяется сторонняя библиотека и тре буется изменить логику действия определенного метода. Но изменить исходный код нельзя, поскольку он предоставлен сторонней организацией, и поэтому единствен ным решением будет замена метода, позволяющая внедрить собственную реализа цию вместо логики действия данного метода. Внутренне это достигается путем динамического создания подкласса, произво дного от класса компонента Spring Bean. Применяя библиотеку CGLIВ, обращения к заменяемому методу следует переадресовать другому компоненту Spring Bean, в ко тором реализуется интерфейс MethodReplacer

Когда целесообразно применять замену метода Замена метода может оказаться весьма полезной в самых разных обстоятельствах, особенно когда требуется переопределить только отдельный метод в единственном, а не во всех компонентах Spring Beans одного и того же типа. Тем не менее для перео пределения методов предпочтительнее пользоваться стандартными механизмами Java, а не полагаться на динамическое расширение байт-кода. Если вы собираетесь применять замену метода как составную часть своего приложения, то рекомендуется использовать одну реализацию интерфейса Method Replacer на каждый метод или группу перегружаемых методов. Не поддавайтесь искушению применять одну реализацию интерфейса MethodReplacer для замены многих несвязанных вместе методов, поскольку это приведет к выполнению допол нительных ненужных сравнений типов String, когда в прикладном коде требуется выяснить, какой именно метод должен получить новую реализацию. Мы обнаружи ли, что простые проверки правильности заменяемого метода в реализации интерфей са MethodReplacer весьма полезны и не влекут за собой значительные издержки.
Если вас действительно заботит вопрос производительности, можете предусмотреть в реализации интерфейса MethodReplacer свойство логического типа, которое по зволит включать и отключать такие проверки с помощью внедрения зависимостей.
