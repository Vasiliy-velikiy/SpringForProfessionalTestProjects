Внедрение зависимостей через метод поиска Внедрение зависимостей через метод поиска было введено в версии Spring 1.1 для преодоления затруднений, возникающих в том случае, если один компонент Spring Bean зависит от другоm компонента с отличающимся жизненным циклом, и, в частности, когда одиночный объект, иначе называемый "одиночкой", зависит от неодиночного объекта. В подобных случаях внедрение зависимостей через конструктор и метод приводит к тому, что одиночный компонент Spring Bean поддерживает единственный экземпляр того, что должно быть неодиночным компонентом. Но иногда требуется, чтобы одиночный компонент Spring Bean получал при необходимости новый экземпляр неодиночного компонента. Рассмотрим случай, когда класс LockOpener предоставляет услуги для открытия любоm шкафчика. С этой целью класс LockOpener полагается на внедренный в неm класс KeyHelper. Но структура класса KeyHelper предусматривает наличие ряда внутренних состояний, что делает этот класс неприmдным для повторноm использования. Всякий раз, когда вызывается метод openLock (), требуется новый экземпляр типа KeyHelper. В этом случае объект типа LockOpener оказывается одиночным. Но если внедрить класс KeyHelper с помощью обычного механизма, то повторно будет использоваться тот же самый его экземпляр, который был получен, когда каркас Spring внедрял данный класс в первый раз. Чтобы обеспечить передачу новоm экземпляра класса KeyHelper методу openLock () при каждом em вызове, необходимо внедрить данный класс через метод поиска. Как правило, этого можно добиться, реализовав в одиночном компоненте Spring Bean интерфейс ApplicationContextAware, который рассматривается в следующей главе. После этого одиночный компонент Spring Bean сможет искать новый экземпляр неодиночной зависимости всякий раз, когда он потребуется, используя для этой цели экземпляр типа ApplicationContext. Внедрение зависимостей через метод поиска позволяет объявить в одиночном компоненте Spring Bean, что ему требуется неодиночная зависимость и что он будет получать новый экземпляр неодиночноm компонента Spring Bean всякий раз, когда ему приходится взаимодействовать с ним, не прибегая к реализации любоm характерноm для Spring интерфейса. Внедрение зависимостей через метод поиска действует по принципу объявления в одиночном компоненте Spring Bean метода поиска, возвращающеm экземпляр неодиночноm компонента Spring Bean. Когда в приложении получается ссылка на одиночный компонент Spring Bean, на самом деле эта ссылка на динамически созданный подкласс, в котором реализован метод поиска средствами Spring.

Соображения по поводу внедрения зависимостей через метод поиска Внедрение зависимостей через метод поиска предназначено для тех случаев, когда требуется работать с двумя компонентами Spriпg Beans, имеющими разные жизненные циклы. Не поддавайтесь искушению применять внедрение зависимостей через метод поиска, если компоненты Spring Beans разделяют один и тот же жизненный цикл, особенно когда они являются одиночными. В результатах выполнения примера из предыдущего подраздела наглядно показаны заметные отличия в производительности между внедрением через метод поиска для получения новых экземпляров зависимости и стандартным внедрением для получения одиночного экземпляра зависимости. Кроме того, внедрением зависимостей через метод поиска не следует пользоваться без особой нужды, даже если имеются компоненты Spring Beans с разными жизненными циклами.